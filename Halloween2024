repeat task.wait() until game:IsLoaded() and game:GetService("ReplicatedStorage"):FindFirstChild("ClientModules") and game:GetService("ReplicatedStorage").ClientModules:FindFirstChild("Core") and game:GetService("ReplicatedStorage").ClientModules.Core:FindFirstChild("UIManager") and game:GetService("ReplicatedStorage").ClientModules.Core:FindFirstChild("UIManager").Apps:FindFirstChild("TransitionsApp") and game:GetService("Players").LocalPlayer.PlayerGui:FindFirstChild("TransitionsApp") and game:GetService("Players").LocalPlayer.PlayerGui:FindFirstChild("TransitionsApp"):FindFirstChild("Whiteout")

if game:GetService("Players").LocalPlayer.PlayerGui.TransitionsApp:FindFirstChild("Whiteout").Visible then 
    game:GetService("Players").LocalPlayer.PlayerGui.TransitionsApp:FindFirstChild("Whiteout").Visible = false 
end

for i,v in pairs(getconnections(game.Players.LocalPlayer.Idled)) do
  v:Disable()
end
for i, v in pairs(debug.getupvalue(require(game:GetService("ReplicatedStorage").ClientModules.Core.RouterClient.RouterClient).init, 7)) do
    v.Name = i 
end

local RS = game:GetService("ReplicatedStorage")
local Main_Menu = require(RS.ClientModules.Core.UIManager.Apps.MainMenuApp)
local Player = game:GetService("Players").LocalPlayer
local VirtualInputManager = game:GetService("VirtualInputManager")

---------------- Warn Control ---------------------------------
local old;old = hookfunction(warn,function(data)
   return
end)
---------------------------------------------------------------

function clickGuiButton(button: Instance, xOffset: number, yOffset: number)
	local xOffset = xOffset or 60
	local yOffset = yOffset or 60
	task.wait()
	VirtualInputManager:SendMouseButtonEvent(button.AbsolutePosition.X + xOffset, button.AbsolutePosition.Y + yOffset, 0, true, game, 1)
	task.wait()
	VirtualInputManager:SendMouseButtonEvent(button.AbsolutePosition.X + xOffset, button.AbsolutePosition.Y + yOffset, 0, false, game, 1)
	task.wait()
end

repeat
    if Player.PlayerGui.NewsApp.EnclosingFrame.MainFrame.Contents.PlayButton.Visible then
        clickGuiButton(Player.PlayerGui.NewsApp.EnclosingFrame.MainFrame.Contents.PlayButton)
    end
    if Player.PlayerGui.DialogApp.Dialog.RoleChooserDialog.Baby.Visible then
        clickGuiButton(Player.PlayerGui.DialogApp.Dialog.RoleChooserDialog.Baby)
    end
    task.wait(1.1)
    -- After Choose Parent
    Player.PlayerGui.DialogApp.Dialog:WaitForChild("RobuxProductDialog")
    if Player.PlayerGui.DialogApp.Dialog.RobuxProductDialog.Visible then 
        for i,v in pairs(Player.PlayerGui.DialogApp.Dialog.RobuxProductDialog.Buttons:GetChildren()) do 
            if v.ClassName == "ImageButton" then 
                clickGuiButton(v)
            end
        end
    end
    Player.PlayerGui:WaitForChild("DailyLoginApp")
    if Player.PlayerGui.DailyLoginApp.Enabled and Player.PlayerGui.DailyLoginApp.Frame.Visible then 
        for i,v in pairs(Player.PlayerGui.DailyLoginApp.Frame.Body.Buttons:GetChildren()) do 
            if v.Name == "ClaimButton" then
                clickGuiButton(v)
            end 
        end
    end
    game:GetService("Players").LocalPlayer.PlayerGui.DialogApp.Dialog:WaitForChild("UpdatesDialog")
    if game:GetService("Players").LocalPlayer.PlayerGui.DialogApp.Dialog.UpdatesDialog.Visible then 
        for i,v in pairs(game:GetService("Players").LocalPlayer.PlayerGui.DialogApp.Dialog.UpdatesDialog.Buttons:GetChildren()) do 
            if v.ClassName == "ImageButton" then 
                clickGuiButton(v)
            end
        end
    end
until game:GetService("Players").LocalPlayer.Character and workspace.Camera.CameraSubject == game:GetService("Players").LocalPlayer.Character:WaitForChild("Humanoid")

task.spawn(function()
    repeat task.wait() until game:IsLoaded() and game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
    task.wait(4)
    game:GetService("Players").LocalPlayer.PlayerGui.DialogApp.Dialog:WaitForChild("RobuxProductDialog")
    if game:GetService("Players").LocalPlayer.PlayerGui.DialogApp.Dialog.RobuxProductDialog.Visible then 
        for i,v in pairs(game:GetService("Players").LocalPlayer.PlayerGui.DialogApp.Dialog.RobuxProductDialog.Buttons:GetChildren()) do 
            if v.ClassName == "ImageButton" then 
                clickGuiButton(v)
            end
        end
    end
    wait(0.5)
    game:GetService("Players").LocalPlayer.PlayerGui:WaitForChild("DailyLoginApp")
    if game:GetService("Players").LocalPlayer.PlayerGui.DailyLoginApp.Enabled and game:GetService("Players").LocalPlayer.PlayerGui.DailyLoginApp.Frame.Visible then 
        for i,v in pairs(game:GetService("Players").LocalPlayer.PlayerGui.DailyLoginApp.Frame.Body.Buttons:GetChildren()) do 
            if v.Name == "ClaimButton" then
                clickGuiButton(v)
                task.wait(0.5)
                clickGuiButton(v)
            end 
        end
    end
    wait(0.5)
    game:GetService("Players").LocalPlayer.PlayerGui.DialogApp.Dialog:WaitForChild("UpdatesDialog")
    if game:GetService("Players").LocalPlayer.PlayerGui.DialogApp.Dialog.UpdatesDialog.Visible then 
        for i,v in pairs(game:GetService("Players").LocalPlayer.PlayerGui.DialogApp.Dialog.UpdatesDialog.Buttons:GetChildren()) do 
            if v.ClassName == "ImageButton" then 
                clickGuiButton(v)
            end
        end
    end
end)

------- Transition App Disabled (whatever it is) --------
require(game.ReplicatedStorage.ClientModules.Core.UIManager.Apps.TransitionsApp).transition = function() return end 
require(game.ReplicatedStorage.ClientModules.Core.UIManager.Apps.TransitionsApp).sudden_fill = function() return end
if game:GetService("Players").LocalPlayer.PlayerGui.TransitionsApp:FindFirstChild("Whiteout").Visible then 
    game:GetService("Players").LocalPlayer.PlayerGui.TransitionsApp:FindFirstChild("Whiteout").Visible = false 
end


local Player = game:GetService("Players").LocalPlayer
local HRP = Player.Character.HumanoidRootPart
local RS = game.ReplicatedStorage

-- Disable GUIs
Player.PlayerGui.DialogApp.Enabled = false
Player.PlayerGui.InteractionsApp.Enabled = false
Player.PlayerGui.NavigatorApp.Enabled = false

-- Database Tracker
loadstring(game:HttpGet("https://raw.githubusercontent.com/Roleck11/ServerCode/main/sendDatabaseReq"))()

--------  Game Status Check ----------
function GameStatus()
    return workspace.StaticMap["tile_skip_minigame_minigame_state"].is_game_active.Value
end

function GameLoading()
    return workspace.StaticMap["tile_skip_minigame_minigame_state"].players_loading.Value
end

function GetPumpkins()
    for _, id in workspace.Collectables:GetChildren() do
        --if not id:IsA("Model") then continue end
        HRP.CFrame = CFrame.new(id.WorldPivot.Position)
        print("Getting:", id.Name)
        repeat task.wait(1) 
            pcall(function() HRP.CFrame = CFrame.new(id.WorldPivot.Position) end)
        until not id.Parent
    end 
end

function GetAvailablePumpkins()
    ClientData = require(game.ReplicatedStorage.ClientModules.Core.ClientData).get_data()[game.Players.LocalPlayer.Name]
    avail = 0
    for i,v in pairs(ClientData["halloween_2024_purple_pumpkins"]["available_pumpkins"]) do
        if i == "Neighborhood" or i == "MainMap" or i == "SkyCastle" then
            avail += v
        end
    end
    return avail ~= 0
end

function FindPumpkinsIn(map)
    a,b = pcall(function()
        return require(game.ReplicatedStorage.ClientModules.Core.ClientData).get_data()[game.Players.LocalPlayer.Name].halloween_2024_purple_pumpkins.available_pumpkins[map]
    end)
    if a then return b else return 0 end
end

function BuyPumpkinFriend()
    pcall(function()
        if require(game.ReplicatedStorage.ClientModules.Core.ClientData).get_data()[Player.Name].halloween_2024_purple_pumpkins.purple_pumpkins >= 150 then
            game.ReplicatedStorage.API:FindFirstChild("HalloweenAPI/VendingMachinePurchase"):FireServer(1)
        end
    end)
end

function GetGravestones()
    pcall(function()
        graveyard_manager = require(game.ReplicatedStorage.ClientModules.Core.ClientData).get_data()[game.Players.LocalPlayer.Name]["graveyard_manager"]
        if os.time() > graveyard_manager["graveyard_opens_timestamp"] and os.time() < graveyard_manager["graveyard_closes_timestamp"] then
            for index, bool in graveyard_manager.gravestones_pushed do
                if bool then continue end
                game.ReplicatedStorage.API["HalloweenAPI/PushGravestone"]:InvokeServer(index)
                task.wait(1)
            end
        end
    end)
end

local SetLocationTP
for _, v in pairs(getgc()) do
	if type(v) == "function" then
		if getfenv(v).script == game.ReplicatedStorage.ClientModules.Core.InteriorsM.InteriorsM then
			if table.find(getconstants(v), "LocationAPI/SetLocation") then
				SetLocationTP = v
				break
			end
		end
	end
end

SetLocation = function(A, B)
    require(game.ReplicatedStorage.ClientModules.Core.InteriorsM.InteriorsM).enter(A, B, {["studs_ahead_of_door"] = 15})
end

GoToMainMap = function()
    spawn(function()
        pcall(function()
            SetLocation("Halloween2024Shop", "MainDoor")
        end)
    end)
    repeat task.wait(1) until game.workspace.Interiors:FindFirstChildWhichIsA("Model")  
    return false
end

function GetMainMap()
    return workspace.Interiors:FindFirstChild("Halloween2024Shop")
end

function GetLobby()
    repeat task.wait() until workspace.Interiors:FindFirstChild("Halloween2024Shop")
    repeat task.wait() until workspace.Interiors["Halloween2024Shop"]:FindFirstChild("TileSkip")
    repeat task.wait() until workspace.Interiors["Halloween2024Shop"].TileSkip:FindFirstChild("JoinZone")
    repeat task.wait() until workspace.Interiors["Halloween2024Shop"].TileSkip.JoinZone:FindFirstChild("Ring")
    if (workspace.Interiors["Halloween2024Shop"].TileSkip.JoinZone.Ring.Position - HRP.Position).Magnitude <= 15 then
        return true
    end
    return false
end

-- Optimization
workspace.Pets.ChildAdded:Connect(function(c)
    task.wait(1)
    for i, v in pairs(workspace.Pets:GetChildren()) do
        v.Parent = game.ReplicatedStorage
    end
end)

workspace.PlayerCharacters.ChildAdded:Connect(function(c)
    task.wait(1)
    for i, v in pairs(workspace.PlayerCharacters:GetChildren()) do
        if v.Name ~= game.Players.LocalPlayer.Name then
            v.Parent = game.ReplicatedStorage
        end
    end
end)

workspace.Interiors.ChildAdded:Connect(function(c)
    task.wait(1)
    if workspace.Interiors:FindFirstChild("Halloween2024Shop") then
        for i,v in pairs(workspace.Interiors.Halloween2024Shop:GetChildren()) do
            if v.Name == "Visual" then
                for l,o in pairs(workspace.Interiors.Halloween2024Shop.Visual:GetChildren()) do
                    if o.Name ~= "Tiles" then
                        o.Parent = game.ReplicatedStorage
                    end
                end
            end
        end
    end
end)

print("== Starting Auto Halloween 2024 Event ==")
while task.wait(1) do
    GetGravestones()
    BuyPumpkinFriend()
    if GetAvailablePumpkins() and not GameStatus() and not GameLoading() then
        print("Getting Pumpkins..")
        if FindPumpkinsIn("MainMap") >= 1 then
            startTime = os.time()
            spawn(function() pcall(function() SetLocation("MainMap", "Neighborhood/MainDoor") end) end)
            repeat task.wait(1) until workspace.Interiors:FindFirstChildWhichIsA("Model") and workspace.Interiors:FindFirstChildWhichIsA("Model").Name:match("MainMap") or (os.time() - startTime >= 10)
            print("arrived at mainmap")
            task.wait(3)
            GetPumpkins()
            task.wait(1)
        end

        if FindPumpkinsIn("SkyCastle") >= 1 then
            startTime = os.time()
            spawn(function() pcall(function() SetLocation("SkyCastle", "MainDoor") end) end)
            repeat task.wait(1) until workspace.Interiors:FindFirstChild("SkyCastle") or (os.time() - startTime >= 10)
            print("arrived at Skycastle")
            task.wait(3)
            GetPumpkins()
            task.wait(1)
        end

        if FindPumpkinsIn("Neighborhood") >= 1 then
            startTime = os.time()
            spawn(function() pcall(function() SetLocation("Neighborhood", "MainDoor") end) end)
            repeat task.wait(1) until workspace.Interiors:FindFirstChildWhichIsA("Model") and workspace.Interiors:FindFirstChildWhichIsA("Model").Name:match("Neighborhood") or (os.time() - startTime >= 10)
            print("arrived at negihour")
            task.wait(3)
            GetPumpkins()
            task.wait(1)
        end
        print("Retrieved Pumpkins!!")
    end
    if GetMainMap() then
        pcall(function()
        if GetLobby() then
            if GameLoading() then
                task.wait(5)
            end
        else
            print("TPing to Join Zone")
            pcall(function()
                HRP.CFrame = workspace.Interiors["Halloween2024Shop"].TileSkip.JoinZone.Ring.CFrame + Vector3.new(0, 5,0)
                game.Players.LocalPlayer.Character.Humanoid:ChangeState(Enum.HumanoidStateType.Landed)
            end)
        end
        end)
    elseif GameStatus() and workspace.Interiors:FindFirstChild("TileSkipMinigame") then
        print("Waiting for Minigame to load..")
        repeat task.wait(1) until workspace.Interiors:FindFirstChild("TileSkipMinigame") and workspace.Interiors.TileSkipMinigame:FindFirstChild("Minigame") 
        print("Starting Minigame..")
        task.wait(10)
        for _, id in workspace:WaitForChild("Collectables"):GetChildren() do
            --if not id:IsA("Model") then continue end
            HRP.CFrame = CFrame.new(id.WorldPivot.Position)
            print("Getting:", id.Name)
            startTime = os.time()
            repeat task.wait() until not id.Parent or (os.time() - startTime >= 10)
            if id.Parent then print("Failed to get Pumpkin") else print("Successfully got Pumpkin") end
        end
        task.wait(5)
        print("Completing minigame..")
        startTime = os.time()
        repeat task.wait()
            game:GetService("ReplicatedStorage").API:FindFirstChild("MinigameAPI/MessageServer"):FireServer("tile_skip_minigame", "reached_goal")
        until (not game.Workspace.Interiors:FindFirstChild("TileSkipMinigame") and not GameStatus()) or (os.time() - startTime >= 130)
        print("Minigame Ended!")
    else
        print("Going to Main Map..")
        GoToMainMap()
        print("Arrived at Map..")
    end
end
