----- INTRO SCRIPT ----------
if not game:IsLoaded() then
    while not game:IsLoaded() do wait(1) end
end

loadstring(game:HttpGet("https://raw.githubusercontent.com/Roleck11/MainScripts/main/AdoptMeIntroCheck"))()

print(" === Executed Roleck Minigame Script - Earning New Currency ===")

---------- Extra GUI Control and Buttons and IMAGES blah blah -------------
game:GetService("Players").LocalPlayer.PlayerGui.DialogApp.Enabled = false
game:GetService("Players").LocalPlayer.PlayerGui.InteractionsApp.Enabled = false
game:GetService("Players").LocalPlayer.PlayerGui.NavigatorApp.Enabled = false

------------ MAIN MINIGAME SCRIPT -------------
local get_thread_identity = get_thread_context or getthreadcontext or getidentity or syn.get_thread_identity
local set_thread_identity = set_thread_context or setthreadcontext or setidentity or syn.set_thread_identity
local Location = nil
local Player = game.Players.LocalPlayer
local Fsys = require(game.ReplicatedStorage:WaitForChild("Fsys")).load

for i, v in pairs(debug.getupvalue(require(game:GetService("ReplicatedStorage").Fsys).load("RouterClient").init, 4)) do
    v.Name = i
end


function PlayMinigame()
    repeat task.wait() until workspace.Interiors:FindFirstChild("BullRideMinigame")
    repeat task.wait() until workspace.Interiors.BullRideMinigame:FindFirstChild("Minigame") and workspace.Interiors.BullRideMinigame.Minigame:FindFirstChild("CowboyHat")
    game.Players.LocalPlayer.Character.HumanoidRootPart.Anchored = false
    task.wait(3)
    -- Add Code to manage minigame..

    ------ PLAY MINIGAME CODE
    print("Minigame Started")
    while GameStatus() and wait(0.1) do
        if workspace.Interiors.BullRideMinigame:FindFirstChild("Minigame") and workspace.Interiors.BullRideMinigame.Minigame:FindFirstChild("CowboyHat") then
            game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(workspace.Interiors.BullRideMinigame.Minigame.CowboyHat.WorldPivot.Position)
        end
    end


    repeat task.wait() until GameStatus()
    print("Game Status Over")
end

--------  Game Status Check ----------
function GameStatus()
    return workspace.StaticMap.bull_ride_minigame_minigame_state.is_game_active.Value
end

local SetLocation = function(A, B, C)
    local O = get_thread_identity()
    set_thread_identity(2)
    require(game.ReplicatedStorage.ClientModules.Core.InteriorsM.InteriorsM).enter(A, B, C)
    set_thread_identity(O)
end

-------- *** GoToMinigame | PlaceName
local GoToMinigameLunar = function()
    game.Players.LocalPlayer.Character.HumanoidRootPart.Anchored = true
    SetLocation("SummerShop", "MainDoor", {})
    wait(2)

    for i, v in pairs(workspace.Interiors.SummerShop.BullRideMinigame.BullMinigameExterior.Model:GetChildren()) do
        if v.Name == "Block" or v.Name == "Collider" then
            v:Destroy()
        end
    end

    game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = workspace.Interiors.SummerShop.BullRideMinigame.JoinZone.Ring.CFrame + Vector3.new(0, 10, 0)
    game.Players.LocalPlayer.Character.HumanoidRootPart.Anchored = false
end

-------- *** Get Lobby, check Interiors
function GetLobby()
    for i, v in pairs(workspace.Interiors:GetChildren()) do
        if tostring(v) == "SummerShop" then
            return true
        end
    end
    return false
end

while true do
    pcall(function()
        if GetLobby() then
            if (workspace.Interiors.SummerShop.BullRideMinigame.JoinZone.WorldPivot.Position and (game.Players.LocalPlayer.Character.HumanoidRootPart.Position - workspace.Interiors.SummerShop.BullRideMinigame.JoinZone.WorldPivot.Position).magnitude < 20) then
            else
                if GetLobby() == true then
                    print("Got Lobby, not in join zone")
                    game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = workspace.Interiors.SummerShop.BullRideMinigame.JoinZone.Ring.CFrame + Vector3.new(0, 10, 0)
                else
                    GoToMinigameLunar()
                end
            end
        elseif GameStatus() == true then
            PlayMinigame()
        else
            GoToMinigameLunar()
        end
    end)
    wait(2)
end
