repeat task.wait(1) until game:IsLoaded()

if not _G.AgingPotionMode and not _G.EggHatchMode then
    _G.AgingPotionMode = true
end

if _G.AgingPotionMode and _G.EggHatchMode then
    game.Players.LocalPlayer:Kick("Select ONE Mode")
end

print("Executed Roleck Task Script - V4.0")
repeat task.wait() until game:IsLoaded() and game:GetService("ReplicatedStorage"):FindFirstChild("ClientModules") and game:GetService("ReplicatedStorage").ClientModules:FindFirstChild("Core") and game:GetService("ReplicatedStorage").ClientModules.Core:FindFirstChild("UIManager") and game:GetService("ReplicatedStorage").ClientModules.Core:FindFirstChild("UIManager").Apps:FindFirstChild("TransitionsApp") and game:GetService("Players").LocalPlayer.PlayerGui:FindFirstChild("TransitionsApp") and game:GetService("Players").LocalPlayer.PlayerGui:FindFirstChild("TransitionsApp"):FindFirstChild("Whiteout")

local RS = game:GetService("ReplicatedStorage")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local ClientData = require(RS.ClientModules.Core.ClientData)
local Player = game:GetService("Players").LocalPlayer
local RouterClient = require(RS.ClientModules.Core:WaitForChild("RouterClient"):WaitForChild("RouterClient"))
local Main_Menu = require(RS.ClientModules.Core.UIManager.Apps.MainMenuApp)
local VirtualInputManager = game:GetService("VirtualInputManager")
local LiveOpsMapSwap = require(game:GetService("ReplicatedStorage").SharedModules.Game.LiveOpsMapSwap)

local LegacyTutorial = require(ReplicatedStorage.ClientModules:WaitForChild('Game'):WaitForChild('Tutorial'):WaitForChild('LegacyTutorial'))

local PetName = ""
local selectedPetID = ""
local MainPet = ""

local numHatched = 0

pet_L = 0
pet_UR = 0
pet_R = 0

game.Players.LocalPlayer.Idled:Connect(function() 
    game:GetService("VirtualUser"):Button2Down(Vector2.new(0, 0), workspace.CurrentCamera.CFrame) 
    task.wait(1)
    game:GetService("VirtualUser"):Button2Up(Vector2.new(0, 0), workspace.CurrentCamera.CFrame) 
end)

for i, v in pairs(debug.getupvalue(RouterClient.init, 7)) do
    v.Name = i
end

---------------------------------------------------------------

function clickGuiButton(button: Instance, xOffset: number, yOffset: number)
	local xOffset = xOffset or 60
	local yOffset = yOffset or 60
	task.wait()
	VirtualInputManager:SendMouseButtonEvent(button.AbsolutePosition.X + xOffset, button.AbsolutePosition.Y + yOffset, 0, true, game, 1)
	task.wait()
	VirtualInputManager:SendMouseButtonEvent(button.AbsolutePosition.X + xOffset, button.AbsolutePosition.Y + yOffset, 0, false, game, 1)
	task.wait()
end

function CompleteStarterTutorial()
    local success, errorMessage = pcall(function()
        --task.wait(1)
        print('START DOING TUTORIAL')
        --LegacyTutorial.cancel_tutorial()
        task.wait(1)
        ReplicatedStorage.API['LegacyTutorialAPI/MarkTutorialCompleted']:FireServer()
        print('MarkTutorialCompleted')
        task.wait(1)
        ReplicatedStorage.API['LegacyTutorialAPI/EquipTutorialEgg']:FireServer()
        print('EquipTutorialEgg')
        task.wait(1)
        --ReplicatedStorage.API['LegacyTutorialAPI/AddTutorialQuest']:FireServer()
        --print('AddTutorialQuest')
        --task.wait(1)
        ReplicatedStorage.API['LegacyTutorialAPI/AddHungryAilmentToTutorialEgg']:FireServer()
        print('AddHungryAilmentToTutorialEgg')
        task.wait(1)

        local function feedStartEgg(SandwichPassOn)
            local Foodid2

            for _, v in pairs(ClientData.get_data()[Player.Name].inventory.food)do
                if v.id == SandwichPassOn then
                    Foodid2 = v.unique

                    break
                end
            end

            ReplicatedStorage.API['ToolAPI/Equip']:InvokeServer(Foodid2, {
                ['use_sound_delay'] = true,
            })
            task.wait(1)

            local args = {
                [1] = '__Enum_PetObjectCreatorType_2',
                [2] = {
                    ['pet_unique'] = ClientData.get('pet_char_wrappers')[1].pet_unique,
                    ['unique_id'] = Foodid2,
                },
            }

            ReplicatedStorage.API['PetObjectAPI/CreatePetObject']:InvokeServer(unpack(args))
        end

        feedStartEgg('sandwich-default')
    end)

    print('Tutorial Completed :', success, errorMessage)
    task.wait(10)
end

function CheckTradeLicense()
    for i,v in pairs(ClientData.get_data()[game.Players.LocalPlayer.Name].inventory.toys) do
        if v.id:match("license") then
            return true
        end
    end
    return false
end

function CheckStarterEgg()
    for i,v in pairs(ClientData.get_data()[game.Players.LocalPlayer.Name].inventory.pets) do
        if v.id == "starter_egg" then
            return true
        end
    end
    return false
end

if not ClientData.get_data()[game.Players.LocalPlayer.Name].tutorial_manager.completed then
    print('New Acc Detected! Setting theme colour..')

    RS.API["SettingsAPI/SetSetting"]:FireServer("theme_color", "black")
    task.wait(1)
end

repeat
    if Player.PlayerGui.NewsApp.EnclosingFrame.MainFrame.Contents.PlayButton.Visible then
        clickGuiButton(Player.PlayerGui.NewsApp.EnclosingFrame.MainFrame.Contents.PlayButton)
    end
    if Player.PlayerGui.DialogApp.Dialog.RoleChooserDialog.Baby.Visible then
        clickGuiButton(Player.PlayerGui.DialogApp.Dialog.RoleChooserDialog.Baby)
    end
    task.wait(1.1)
    -- After Choose Parent
    Player.PlayerGui.DialogApp.Dialog:WaitForChild("RobuxProductDialog")
    if Player.PlayerGui.DialogApp.Dialog.RobuxProductDialog.Visible then 
        for i,v in pairs(Player.PlayerGui.DialogApp.Dialog.RobuxProductDialog.Buttons:GetChildren()) do 
            if v.ClassName == "ImageButton" then 
                clickGuiButton(v)
            end
        end
    end
    task.wait()
    Player.PlayerGui:WaitForChild("DailyLoginApp")
    if Player.PlayerGui.DailyLoginApp.Enabled and Player.PlayerGui.DailyLoginApp.Frame.Visible then 
        for i,v in pairs(Player.PlayerGui.DailyLoginApp.Frame.Body.Buttons:GetChildren()) do 
            if v.Name == "ClaimButton" then
                clickGuiButton(v)
            end 
        end
    end
    game:GetService("Players").LocalPlayer.PlayerGui.DialogApp.Dialog:WaitForChild("UpdatesDialog")
    if game:GetService("Players").LocalPlayer.PlayerGui.DialogApp.Dialog.UpdatesDialog.Visible then 
        for i,v in pairs(game:GetService("Players").LocalPlayer.PlayerGui.DialogApp.Dialog.UpdatesDialog.Buttons:GetChildren()) do 
            if v.ClassName == "ImageButton" then 
                clickGuiButton(v)
            end
        end
    end
until game:GetService("Players").LocalPlayer.Character and workspace.Camera.CameraSubject == game:GetService("Players").LocalPlayer.Character:WaitForChild("Humanoid")

if not ClientData.get_data()[game.Players.LocalPlayer.Name].tutorial_manager.completed then
    print("Tutorial Status: false")

    if #workspace.Interiors:GetChildren() == 1 and workspace.Interiors:FindFirstChildWhichIsA("Model").Name:match("Tutorial") then
        print('Completing new tutorial..')
        RS.API:WaitForChild('TutorialAPI/ChoosePet'):FireServer('cat')
        task.wait(3)

        RS.API['TutorialAPI/ReportHousingTutorialCompleted']:FireServer()
        task.wait(3)
        RS.API['TutorialAPI/ReportTutorialCompleted']:FireServer()
        task.wait(1)

        game:Shutdown()
    end

    if CheckStarterEgg() or (not CheckTradeLicense()) then task.wait(10) end
    if Player.PlayerGui.DialogApp.Dialog.NormalDialog.Info.TextLabel.Text:match('Welcome to Adopt Me!') then
        print('Completing Starter Tutorial..')
        CompleteStarterTutorial()
        task.wait(1)
        RS.API['TutorialAPI/ReportHousingTutorialCompleted']:FireServer()
        task.wait(1)
        RS.API['TutorialAPI/ReportTutorialCompleted']:FireServer()
        task.wait(1)
        game:Shutdown()
    end
    
end

task.spawn(function()
    while not CheckTradeLicense() do
        local a,b = pcall(function()
            game:GetService("ReplicatedStorage"):WaitForChild("API"):FindFirstChild("TradeAPI/BeginQuiz"):FireServer()
            for i,v in pairs(getgc(true)) do
                if type(v) == "table" and rawget(v,"question_index") then
                    for i,v in pairs(v.quiz) do
                        game:GetService("ReplicatedStorage"):WaitForChild("API"):FindFirstChild("TradeAPI/AnswerQuizQuestion"):FireServer(v.answer)
                    end 
                end
            end
        end)
        if not a then print(b) end
        task.wait(1)
    end
end)

task.spawn(function()
    repeat task.wait() until game:IsLoaded() and game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
    task.wait(4)
    game:GetService("Players").LocalPlayer.PlayerGui.DialogApp.Dialog:WaitForChild("RobuxProductDialog")
    if game:GetService("Players").LocalPlayer.PlayerGui.DialogApp.Dialog.RobuxProductDialog.Visible then 
        for i,v in pairs(game:GetService("Players").LocalPlayer.PlayerGui.DialogApp.Dialog.RobuxProductDialog.Buttons:GetChildren()) do 
            if v.ClassName == "ImageButton" then 
                clickGuiButton(v)
            end
        end
    end
    wait(0.5)
    game:GetService("Players").LocalPlayer.PlayerGui:WaitForChild("DailyLoginApp")
    if game:GetService("Players").LocalPlayer.PlayerGui.DailyLoginApp.Enabled and game:GetService("Players").LocalPlayer.PlayerGui.DailyLoginApp.Frame.Visible then 
        for i,v in pairs(game:GetService("Players").LocalPlayer.PlayerGui.DailyLoginApp.Frame.Body.Buttons:GetChildren()) do 
            if v.Name == "ClaimButton" then
                clickGuiButton(v)
                task.wait(0.5)
                clickGuiButton(v)
            end 
        end
    end
    wait(0.5)
    game:GetService("Players").LocalPlayer.PlayerGui.DialogApp.Dialog:WaitForChild("UpdatesDialog")
    if game:GetService("Players").LocalPlayer.PlayerGui.DialogApp.Dialog.UpdatesDialog.Visible then 
        for i,v in pairs(game:GetService("Players").LocalPlayer.PlayerGui.DialogApp.Dialog.UpdatesDialog.Buttons:GetChildren()) do 
            if v.ClassName == "ImageButton" then 
                clickGuiButton(v)
            end
        end
    end
end)

---------- Extra GUI Control and Buttons and IMAGES blah blah -------------
game:GetService("Players").LocalPlayer.PlayerGui.DialogApp.Enabled = false
game:GetService("Players").LocalPlayer.PlayerGui.InteractionsApp.Enabled = false
game:GetService("Players").LocalPlayer.PlayerGui.NavigatorApp.Enabled = false

------- Disable Transition App --------
require(game.ReplicatedStorage.ClientModules.Core.UIManager.Apps.TransitionsApp).transition = function() return end 
require(game.ReplicatedStorage.ClientModules.Core.UIManager.Apps.TransitionsApp).sudden_fill = function() return end
if game:GetService("Players").LocalPlayer.PlayerGui.TransitionsApp:FindFirstChild("Whiteout").Visible then 
    game:GetService("Players").LocalPlayer.PlayerGui.TransitionsApp:FindFirstChild("Whiteout").Visible = false 
end

--------- Rolox OVerlay Screen
ScreenGui = Instance.new("ScreenGui")
Frame = Instance.new("Frame")
Frame_2 = Instance.new("Frame")
TextLabel = Instance.new("TextLabel")

--Properties:

ScreenGui.Parent = game.CoreGui
ScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
ScreenGui.Name = "RoloxBotOverlay"
ScreenGui.Enabled = false

Frame.Parent = ScreenGui
Frame.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
Frame.BorderColor3 = Color3.fromRGB(0, 0, 0)
Frame.BorderSizePixel = 0
Frame.Position = UDim2.new(0, 0, 0, -70)
Frame.Size = UDim2.new(1, 0, 1, 70)

Frame_2.Parent = Frame
Frame_2.AnchorPoint = Vector2.new(0.5, 0.5)
Frame_2.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
Frame_2.BackgroundTransparency = 1.000
Frame_2.BorderColor3 = Color3.fromRGB(0, 0, 0)
Frame_2.BorderSizePixel = 0
Frame_2.Position = UDim2.new(0.5, 0, 0.5, 0)
Frame_2.Size = UDim2.new(0.75, 0, 0, 750)

TextLabel.Parent = Frame_2
TextLabel.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
TextLabel.BackgroundTransparency = 1.000
TextLabel.BorderColor3 = Color3.fromRGB(0, 0, 0)
TextLabel.BorderSizePixel = 0
TextLabel.Size = UDim2.new(1, 0, 1, 0)
TextLabel.Font = Enum.Font.GothamBold
TextLabel.Text = "Error.."
TextLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
TextLabel.TextSize = 30.000
TextLabel.RichText = true

function disp_time(time)
    local days = math.floor(time/86400)
    local hours = math.floor(math.fmod(time, 86400)/3600)
    local minutes = math.floor(math.fmod(time,3600)/60)
    local seconds = math.floor(math.fmod(time,60))
    return string.format("%d:%02d:%02d:%02d",days,hours,minutes,seconds)
end

game:GetService("UserInputService").InputBegan:Connect(function(input)
    if input.KeyCode == Enum.KeyCode.Q then
        if ScreenGui.Enabled == false then
            ScreenGui.Enabled = true
        else
            ScreenGui.Enabled = false
        end
    end
end)

_G.Status = "Loading..."
StartPotions = tonumber((function() local t={} for i,v in pairs(ClientData.get_data()[game.Players.LocalPlayer.Name].inventory.food)do if v.id=="pet_age_potion"then table.insert(t,i)end end return #t end)())
StartBucks = ClientData.get_data()[Player.Name].money
OldDifPots = 0
OldDifPotTime = os.time()
getgenv().StartTimeAC = os.time()
function SetStatus()
    Potions = tostring((function() local t={} for i,v in pairs(ClientData.get_data()[game.Players.LocalPlayer.Name].inventory.food)do if v.id=="pet_age_potion"then table.insert(t,i)end end return #t end)())
    EventCurrency = (ClientData.get_data()[game.Players.LocalPlayer.Name][require(game:GetService("ReplicatedStorage").SharedModules.SharedDB.AltCurrencyData)["name"]] or 0)
    Bucks = ClientData.get_data()[Player.Name].money
    
    DifPotion = tonumber(Potions) - StartPotions
    DifBucks = ClientData.get_data()[Player.Name].money - StartBucks

    if DifPotion > 0 then
        Potions = Potions .. " (+"..DifPotion..")"
    end
    if DifBucks > 0 then Bucks = Bucks .. " (+"..DifBucks..")" end

    if _G.AgingPotionMode then
        if DifPotion > OldDifPots then
            OldDifPots = DifPotion
            OldDifPotTime = os.time()
        else
            if (os.time() - OldDifPotTime >= 7200) and (DifPotion > 0) and (DifPotion / math.floor((os.time() - StartTimeAC)/60/60) < 1) and (not _G.AccStuck) then
                RequestWebhook("Shutting down due to no pots in past 2 hours")
                game.Players.LocalPlayer:Kick("Account is Stuck")
                game:Shutdown()
                _G.AccStuck = true
            end
        end
    end

    getgenv().StatsAM = {
        Bucks = DifBucks,
        Potions = DifPotion
    }

    -- confusion occurs?? Eggs Hatched: <font color="rgb(41, 255, 226)">]]..tostring(numHatched)..[[</font>

    if _G.EggHatchMode then
        TextLabel.Text = [[<font color="rgb(255,180,180)">]]..game.Players.LocalPlayer.Name..[[</font> - RoloxBotV3.40
        Status: <font color="rgb(187, 166, 255)"> ]].._G.Status..[[ </font>
        Potions: <font color="rgb(252, 207, 71)">]]..Potions..[[</font>
        Bucks: <font color="rgb(0, 191, 41)">]]..Bucks..[[</font>
        Event Currency: <font color="rgb(237, 63, 14)">]]..EventCurrency..[[</font>
        
        Moon Pets: <font color="rgb(209, 192, 140)">]] .. tostring(pet_L) .. "L " .. tostring(pet_UR) .. "UR " .. tostring(pet_R) .. "R" .. [[</font>    
        Total Time: <font color="rgb(137, 41, 255)">]]..disp_time(os.time() - StartTimeAC)..[[</font>
        
        <font color="rgb(130, 255, 228)">Press Q to toggle</font>
        ]]
    else
        TextLabel.Text = [[<font color="rgb(255,180,180)">]]..game.Players.LocalPlayer.Name..[[</font> - RoloxBotV3.40
        Status: <font color="rgb(187, 166, 255)"> ]].._G.Status..[[ </font>
        Potions: <font color="rgb(252, 207, 71)">]]..Potions..[[</font>
        Bucks: <font color="rgb(0, 191, 41)">]]..Bucks..[[</font>
        Event Currency: <font color="rgb(237, 63, 14)">]]..EventCurrency..[[</font>
        
        Total Time: <font color="rgb(137, 41, 255)">]]..disp_time(os.time() - StartTimeAC)..[[</font>
        
        <font color="rgb(130, 255, 228)">Press Q to toggle</font>
        ]]
    end
end

SetStatus()
ScreenGui.Enabled = true

spawn(function()
    while task.wait(1) and (not getgenv().Disconnected) do
        successC, errorC = pcall(SetStatus)
        if not successC then print(errorC) end
    end
end)

---------------------------------------------------
repeat task.wait() until game.Players.LocalPlayer
task.wait(2)
local args = {
    [1] = "Babies",
    [2] = {["dont_send_back_home"] = true}
}
game:GetService("ReplicatedStorage"):WaitForChild("API"):WaitForChild("TeamAPI/ChooseTeam"):InvokeServer(unpack(args))

repeat wait() until game.Players.LocalPlayer.Character
repeat wait() until game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
repeat wait() until game:GetService("Players").LocalPlayer.Character and workspace.Camera.CameraSubject == game:GetService("Players").LocalPlayer.Character:WaitForChild("Humanoid")
local HRP = Player.Character.HumanoidRootPart
--game.Players.LocalPlayer.Character:FindFirstChild("Humanoid").WalkSpeed = 0 -- Disable Walkspeed

local args = {
    [1] = false
}
game:GetService("ReplicatedStorage"):WaitForChild("API"):WaitForChild("AvatarAPI/SetPlayerOnPlayerCollision"):FireServer(unpack(args))


-- GET C
while task.wait() do
    local args = {
        [1] = 5,
        [2] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,16 ,17, 18, 19,20}
    }
    game:GetService("ReplicatedStorage"):WaitForChild("API"):WaitForChild("ValentinesEventAPI/PickupRoseHearts"):FireServer(unpack(args))
end
