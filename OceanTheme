if not game:IsLoaded() then
    while not game:IsLoaded() do wait(1) end
end

loadstring(game:HttpGet("https://raw.githubusercontent.com/Roleck11/MainScripts/main/AdoptMeIntroCheck"))()

--[[Anti AFK]] for i,v in pairs(getconnections(game.Players.LocalPlayer.Idled)) do v:Disable() end

local Player = game:GetService("Players").LocalPlayer
local HRP = Player.Character.HumanoidRootPart
local RS = game.ReplicatedStorage
local Fsys = require(RS:WaitForChild("Fsys")).load
local get_thread_identity = get_thread_context or getthreadcontext or getidentity or syn.get_thread_identity
local set_thread_identity = set_thread_context or setthreadcontext or setidentity or syn.set_thread_identity

-- Disable GUIs
Player.PlayerGui.DialogApp.Enabled = false
Player.PlayerGui.InteractionsApp.Enabled = false
Player.PlayerGui.NavigatorApp.Enabled = false

--------  Game Status Check ----------
function GameStatus()
    return workspace.StaticMap.ocean_minigame_minigame_state.is_game_active.Value
end

function GameLoading()
    return workspace.StaticMap.ocean_minigame_minigame_state.players_loading.Value
end

function GetBucks()
    return Fsys("ClientData").get_data()[Player.Name].money
end

SetLocation = function(A, B, C)
    local O = get_thread_identity()
    set_thread_identity(2)
    require(game.ReplicatedStorage.ClientModules.Core.InteriorsM.InteriorsM).enter(A, B, C)
    set_thread_identity(O)
end

GoToMainMap = function()
    spawn(function()
        pcall(function()
            SetLocation("MainMap", "Neighborhoodd/MainDoor", {["spawn_cframe"] = CFrame.new(-248.025375, 30.79702, -1746.41724, -0.998434782, -7.92188573e-08, -0.0559278913, -7.50130056e-08, 1, -7.73006334e-08, 0.0559278913, -7.29843208e-08, -0.998434782)})
        end)
    end)
    repeat task.wait(1) until game.workspace.Interiors:FindFirstChildWhichIsA("Model")  
    return false
end

function GetMainMap()
    local a = game.Workspace:FindFirstChild("Interiors"):FindFirstChild("center_map_plot", true)
    if a then
        return a.Parent.Parent.Name
    else
        return false
    end
end

function GetLobby()
    MapName = GetMainMap()
    if MapName then 
        repeat task.wait(1) until workspace.Interiors[MapName]:FindFirstChild("Event") and workspace.Interiors[MapName].Event:FindFirstChild("Ocean2024Exterior")
        repeat task.wait(1) until workspace.Interiors[MapName].Event.Ocean2024Exterior:FindFirstChild("JoinZone")
        repeat task.wait(1) until workspace.Interiors[MapName].Event.Ocean2024Exterior.JoinZone:FindFirstChild("Ring")
        if (workspace.Interiors[MapName].Event.Ocean2024Exterior.JoinZone.Ring.Position - HRP.Position).Magnitude <= 15 then
            return true
        end
    end
    return false
end

spawn(function()   
    local function CheckPetRarity(PetName)
        for _, entry in pairs(require(game:GetService("ReplicatedStorage").ClientDB.Inventory.InventoryDB).pets) do
            if type(entry) == "table" and string.lower(entry.name) == string.lower(PetName) then
                if entry.rarity == "common" then
                    return "Common"
                elseif entry.rarity == "uncommon" then 
                    return "Uncommon"
                elseif entry.rarity == "rare" then 
                    return "Rare"
                elseif entry.rarity == "ultra_rare" then 
                    return "Ultra Rare"
                elseif entry.rarity == "legendary" then 
                    return "Legendary"
                end
            end
        end
    end

    local function getInventoryInfo(tab)
        local petsTable = {}
        local allInventory = {}

        for _, v in pairs(require(game.ReplicatedStorage:WaitForChild("Fsys", 600)).load("ClientData").get_data()[game.Players.LocalPlayer.Name].inventory[tab]) do
            if v.id == "practice_dog" then continue end
            local isNeon = v.properties and v.properties.neon
            local isMega = v.properties and v.properties.mega_neon
            local petKey = isNeon and ("neon_" .. v.id) or isMega and ("mega_" .. v.id) or v.id
            petsTable[petKey] = (petsTable[petKey] or 0) + 1
        end

        for petKey, count in pairs(petsTable) do
            local isNeon = petKey:sub(1,5) == "neon_"
            local isMega = petKey:sub(1,5) == "mega_"
            local petId = isNeon and petKey:sub(6) or isMega and petKey:sub(6) or petKey
            local petInfo = nil
    
            for _, petData in pairs(require(game.ReplicatedStorage:WaitForChild("Fsys", 600)).load("InventoryDB")["pets"]) do
                if petId == tostring(petData.id) then
                    petInfo = petData
                    break
                end
            end
    
            if petInfo then
                local petName = isNeon and ("Neon " .. petInfo.name) or isMega and ("Mega " .. petInfo.name) or petInfo.name
                local petRarity = CheckPetRarity(petInfo.name)
                table.insert(allInventory, (count .. "x " .. petName) .. " - " .. petRarity)
            end
        end
        local rarityOrder = {
            ["Legendary"] = 1,
            ["Ultra Rare"] = 2,
            ["Rare"] = 3,
            ["Uncommon"] = 4,
            ["Common"] = 5
        }
    
        table.sort(allInventory, function(a, b)
            local aRarity = a:match("%- (.+)$")
            local bRarity = b:match("%- (.+)$")
            return (rarityOrder[aRarity] or 6) < (rarityOrder[bRarity] or 6)
        end)
        return allInventory
    end

    local headers = {
        ["Content-Type"] = "application/json",
        ["Access-Control-Request-Headers"] = "*",
        ["api-key"] = "Gu2DvaZp4Fg1OU3NeyIx8AiUoVv1eiMTSEJh1u47G7UpD93RTlagBUrnks5VZAYm",
    }
    
    local body = {
        ["dataSource"] = "Cluster0",
        ["database"] = "test",
        ["collection"] = "idk",
        ["filter"] = {},
        ["update"] = {
            ["$set"] = {
                ["stats"] = {}
            }
        },
        ["upsert"] = true
    }

    lower_user = game.Players.LocalPlayer.Name:lower()
    if lower_user:match("monsterocean") or lower_user:match("beastocean") or lower_user:match("alienocean") or lower_user:match("jumboocean") or lower_user:match("farmergrindam") then
        passA = true
    else
        passA = false
    end

    game:GetService("CoreGui"):WaitForChild("RobloxPromptGui", math.huge).promptOverlay.ChildAdded:Connect(function(Child)
        if Child.Name ~= "ErrorPrompt" then
            return
        end
        getgenv().Disconnected = true
    end)

    while passA and task.wait() and not getgenv().Disconnected do
        pcall(function()
            body["filter"]["username"] = game.Players.LocalPlayer.Name
            body["update"]["$set"]["stats"]["aging_potion"] = tostring((function() local t={} for i,v in pairs(require(game.ReplicatedStorage.ClientModules.Core.ClientData).get_data()[game.Players.LocalPlayer.Name].inventory.food)do if v.id=="pet_age_potion"then table.insert(t,i)end end return #t end)())
            body["update"]["$set"]["stats"]["bucks"] = game:GetService("Players").LocalPlayer.PlayerGui:WaitForChild("BucksIndicatorApp").CurrencyIndicator.Container.Amount.Text
            body["update"]["$set"]["stats"]["event_currency"] = (require(game.ReplicatedStorage.ClientModules.Core.ClientData).get_data()[game.Players.LocalPlayer.Name][require(game:GetService("ReplicatedStorage").SharedModules.SharedDB.AltCurrencyData)["name"]] or 0)
            body["update"]["$set"]["stats"]["pets"] = getInventoryInfo("pets")
            body["update"]["$set"]["last_updated"] = os.date("!%Y-%m-%dT%H:%M:%SZ")

            request({
                Url = "https://us-east-2.aws.data.mongodb-api.com/app/data-ljriije/endpoint/data/v1/action/updateOne",
                Method = "POST",
                Headers = headers,
                Body = game:GetService("HttpService"):JSONEncode(body)
            })
        end)
        task.wait(300)
    end
end)

print("Starting this..")
while task.wait(1) do
    if GetMainMap() then
        if GetLobby() then
            if GameLoading() then
                task.wait(5)
            elseif GetBucks() > 1000 then
                success = RS.API:WaitForChild("OceanAPI/AttemptPurchaseDive"):InvokeServer()
                if success then
                    print("Spent 1000 Bucks to Start Game!")
                end
            end
        else
            HRP.CFrame = workspace.Interiors["MainMap/Default"].Event.Ocean2024Exterior.JoinZone.Ring.CFrame + Vector3.new(0, 5,0)
        end
    elseif GameStatus() and workspace.Interiors:FindFirstChild("OceanMinigameInterior") then
        repeat task.wait(1) until workspace.Interiors:FindFirstChild("OceanMinigameInterior") and workspace.Interiors.OceanMinigameInterior:FindFirstChild("GameObjects") 
        print("Starting Minigame..")
        repeat task.wait()
            pcall(function()
                for i, v in pairs(workspace.Interiors.OceanMinigameInterior.GameObjects:GetChildren()) do
                    if v.Name == "Ocean2024Coin" or v.Name:match("Ocean2024Chest") then
                        for l,o in pairs(v:GetChildren()) do
                            if o.Name:match("Coin1") or o.Name:match("LegendChest") or o.Name:match("StandardChest") then
                                repeat task.wait()
                                pcall(function() HRP.CFrame = o.CFrame end)
                                until not o.Parent
                            end
                        end
                    else
                        v:Destroy()
                    end
                    task.wait(0.1)
                end
            end)
        until not game.Workspace.Interiors:FindFirstChild("OceanMinigameInterior") and not GameStatus()
        print("Minigame Ended!")
    else
        print("Going to Main Map..")
        GoToMainMap()
    end
end
